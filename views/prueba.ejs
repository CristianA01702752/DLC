
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Coding Train: Data and APIs Project 1</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
  </head>
  <body>
    <h1>Global Average Temperatures 1880-2018</h1>
    <canvas id="myChart" width="400" height="200"></canvas>

    <script>
      // Data from: https://data.giss.nasa.gov/gistemp/
      // Mean from: https://earthobservatory.nasa.gov/world-of-change/DecadalTemp

      window.addEventListener('load', setup);

      async function setup() {
        const ctx = document.getElementById('myChart').getContext('2d');
        const dataTemps = await getData();
        const myChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dataTemps.years,
            datasets: [
              {
                label: 'Global Temperature in °C',
                data: dataTemps.temps,
                fill: false,
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderWidth: 1
              },
              {
                label: 'Northern Hemisphere Temperature in °C',
                data: dataTemps.northern,
                fill: false,
                borderColor: 'rgba(99, 132, 255, 1)',
                backgroundColor: 'rgba(99, 132, 255, 0.5)',
                borderWidth: 1
              },
              {
                label: 'Souther Hemisphere in °C',
                data: dataTemps.southern,
                fill: false,
                borderColor: 'rgba(99, 255, 132, 1)',
                backgroundColor: 'rgba(99, 255, 132, 0.5)',
                borderWidth: 1
              }
            ]
          },
          options: {}
        });
      }

      async function getData() {
        // const response = await fetch('testdata.csv');
        const response = await fetch('ZonAnn.Ts+dSST.csv');
        const data = await response.text();
        const years = [];
        const temps = [];
        const northern = [];
        const southern = [];
        const rows = data.split('\n').slice(1);
        rows.forEach(row => {
          const cols = row.split(',');
          years.push(cols[0]);
          temps.push(14 + parseFloat(cols[1]));
          northern.push(14 + parseFloat(cols[2]));
          southern.push(14 + parseFloat(cols[3]));
        });
        return { years, temps, northern, southern };
      }
    </script>




<script type="text/javascript">
async cargaTrabajoChartData(){
  // PARSE AIRTABLE DATA
  this.airtableData = await getAirtableData(this.id_proyecto);

  // REORDER DATA
  let integrantesData = {};
  for (let i = 0; i < this.airtableData.length; i++) {
    if (!('Assigned' in this.airtableData[i])){continue;}
    for (let j = 0; j < this.airtableData[i].Assigned.length; j++) {
      const key = this.airtableData[i].Assigned[j].name;
      if (!(key in integrantesData)){
        integrantesData[key] = 0;
      }
      if (this.normalizeString(this.airtableData[i].Status) == 'DONE'){
        integrantesData[key] += this.airtableData[i].Duration / 3600;
      }
      else if (this.normalizeString(this.airtableData[i].Status) == 'REJECTED'){
        continue;
      }
      else {
        integrantesData[key] += this.airtableData[i].Estimation;
      }
    }
  }
  const carga = [];
  const keys = Object.keys(integrantesData);
  for (let i = 0; i < keys.length; i++) {
    carga.push(integrantesData[keys[i]].toFixed(2));
  }
  const names = []
  for (let i = 0; i < keys.length; i++) {
    names.push(keys[i].split(' ')[0]);
  }

  // GENERATE RESPONSE
  const data = {
    labels: names,
    datasets: [
      {
        data: carga,
        borderWidth: 1,
        backgroundColor: [
        'rgba(255, 99, 132, 0.8)',
        'rgba(255, 159, 64, 0.8)',
        'rgba(255, 205, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(54, 162, 235, 0.8)',
        'rgba(153, 102, 255, 0.8)',
        'rgba(201, 203, 207, 0.8)',
        'rgba(255, 99, 132, 0.8)',
        'rgba(255, 159, 64, 0.8)',
        'rgba(255, 205, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(54, 162, 235, 0.8)',
        'rgba(153, 102, 255, 0.8)',
        'rgba(201, 203, 207, 0.8)'
        ],
      },
    ]
  };
  const config = {
    type: 'bar',
    data: data,
    options: {
      legend: {
        display: false
      },
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true,
            fontColor: '#eee',
          },
          scaleLabel: {
            display: true,
            labelString: 'Tiempo de trabajo (hrs.)',
            fontColor: '#eee'
          }
        }],
        xAxes: [{
          ticks: {
            fontColor: '#eee',
          },
        }],
        y: {
          beginAtZero: true
        }
      }
    }
  }

  return config;
}
</script>
  </body>
</html>
